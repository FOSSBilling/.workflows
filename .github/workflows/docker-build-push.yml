name: Build and Push to Docker Hub

on:
  workflow_call:
    inputs:
      download-artifact:
        description: >
          'The name of a build artifact containing the files required to build the image(s).
          The download should contain a single .tar archive named build.tar.'
        default: ''
        required: false
        type: string
      platforms:
        description: 'The platform(s) to build and push images for (as JSON string array).'
        default: '["linux/amd64"]'
        required: false
        type: string
      repository-name:
        description: 'The repository to push images to (e.g. namespace/repo-name).'
        default: ${{ github.repository }}
        required: false
        type: string
      tag-latest:
        description: 'Whether to tag the builds with the latest tag or not.'
        default: 'false'
        required: false
        type: string
      tag-raw:
        description: 'The raw tag name to tag the builds with, if any.'
        default: ''
        required: false
        type: string
    secrets:
      dockerhub-username:
        description: 'The username used to authenticate with Docker Hub.'
        required: true
      dockerhub-token:
        description: 'The personal access token used to authenticate with Docker Hub.'
        required: true

jobs:
  build:
    name: 'Build and Push Image (${{ matrix.platform }})'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(inputs.platforms) }}
    steps:
      - name: 'Docker Meta'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.repository-name }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ inputs.tag-latest == 'true' }}
            type=raw,value=${{ inputs.tag-raw }},enable=${{ inputs.tag-raw != '' }}

      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v3

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Login to Docker Hub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: 'Checkout Dockerfile'
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            Dockerfile
          sparse-checkout-cone-mode: false

      - name: 'Download Files Required for Build'
        if: ${{ inputs.download-artifact != '' }}
        uses: actions/download-artifact@v5
        with:
          name: ${{ inputs.download-artifact }}
          path: '/tmp/'

      - name: 'Extract Files Required for Build'
        if: ${{ inputs.download-artifact != '' }}
        run: |
          mkdir ./src
          tar -xvf /tmp/build.tar -C ./src

      - name: 'Build and Push by Digest'
        id: build
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}
          cache-to: type=gha,scope=${{ github.ref_name }}-${{ matrix.platform }}
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ inputs.repository-name }},push-by-digest=true,name-canonical=true,push=true
          platforms: ${{ matrix.platform }}

      - name: 'Export Digest'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: 'Check if Digests Artifact Exists and Merge'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: owner,
              repo: repo,
              run_id: context.runId,
              name: 'digests'
            });

            if (artifacts.data.total_count > 0) {
              console.log('Digests artifact already uploaded - retrieving.');
              const digests = await github.rest.actions.downloadArtifact({
                owner,
                repo,
                artifact_id: artifacts.data.artifacts[0].id,
                archive_format: 'zip'
              });
              require('fs').writeFileSync('/tmp/digests.zip', Buffer.from(digests.data));
              require('child_process').execSync(`unzip -o /tmp/digests.zip -d /tmp/digests`);

              console.log('Deleting already uploaded digests artifact.')
              const result = await github.rest.actions.deleteArtifact({
                owner: owner,
                repo: repo,
                artifact_id: artifacts.data.artifacts[0].id
              });

              if (result.status == 204) { 
                return; 
              } else {
                core.setFailed('Error occured deleting existing digests artifact');
              }
            } else {
              return;
            }

      - name: 'Upload Digests'
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  push:
    name: 'Merge Builds and Push Manifest'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 'Download Digests'
        uses: actions/download-artifact@v5
        with:
          name: digests
          path: /tmp/digests

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Docker Meta'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.repository-name }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ inputs.tag-latest == 'true' }}
            type=raw,value=${{ inputs.tag-raw }},enable=${{ inputs.tag-raw != '' }}

      - name: 'Login to Docker Hub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: 'Create Manifest List and Push'
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ inputs.repository-name }}@sha256:%s ' *)
        working-directory: /tmp/digests

      - name: 'Inspect Image'
        run: |
          docker buildx imagetools inspect ${{ inputs.repository-name }}:${{ steps.meta.outputs.version }}